

tempo:
  enabled: true
  traces:
    otlp:
      grpc:
        enabled: true

grafana:
  enabled: true
  grafana.ini:
    wal: true
    auth:
      disable_login_form: true
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Admin
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
      serve_from_sub_path: true
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          uid: webstore-metrics
          type: prometheus
          url: "http://{{ .Release.Name }}-mimir-nginx.{{ .Release.Namespace }}/prometheus"
          editable: true
          isDefault: true
        - name: Tempo
          uid: webstore-traces
          type: tempo
          url: 'http://{{ .Release.Name }}-tempo-query-frontend.{{ .Release.Namespace }}:3100'
          editable: true
          isDefault: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboardsConfigMaps:
    default: 'koala-grafana-dashboards'
    # default: '{{ include "otel-demo.name" . }}-grafana-dashboards'
  resources:
    limits:
      memory: 150Mi


collector:
  enabled: true
  mode: deployment
  presets:
    kubernetesAttributes:
      enabled: true
  resources:
    limits:
      memory: 200Mi
  service:
    type: ClusterIP
  ports:
    metrics:
      enabled: true
    prometheus:
      enabled: true
      containerPort: 9464
      servicePort: 9464
      protocol: TCP
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9464"
    koala_managed: "true"
  config:
    exporters:
      prometheusremotewrite:
        endpoint: "http://{{ .Release.Name }}-mimir-nginx.{{ .Release.Namespace }}/api/v1/push"
        tls:
          insecure: true
      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200
      otlp/tracing:
        endpoint: http://{{ .Release.Name }}-tempo-distributor.{{ .Release.Namespace }}:4317
        tls:
          insecure: true
    extensions:
      health_check: {}
      memory_ballast:
        size_in_percentage: 40
    processors:
      resource:
          attributes:
          - key: service.instance.id
            from_attribute: k8s.pod.uid
            action: insert
      filter/empty_http_server_duration:
        error_mode: ignore
        metrics:
          metric:
              - 'name == "http.server.duration" and type != METRIC_DATA_TYPE_HISTOGRAM'
              - 'name == "http.client.duration" and type != METRIC_DATA_TYPE_HISTOGRAM'
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25

    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
      # zipkin:
      #   endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
        - health_check
        - memory_ballast
      pipelines:
        traces:
          exporters:
            - otlp/tracing
          processors:
            - k8sattributes
            - memory_limiter
            - batch
          receivers:
            - otlp
            - jaeger
        metrics:
          receivers: 
            - otlp
            - prometheus
          processors: 
            - memory_limiter
            - k8sattributes
            - filter/empty_http_server_duration
            - resource
            - batch
          exporters: 
            - prometheusremotewrite
            - debug
      telemetry:
        # logs:
        #   level: debug
        #   initial_fields:
        #     service: my-instance
        #   development: true
        #   encoding: json
        #   disable_caller: true
        #   disable_stacktrace: true
        #   sampling:
        #     initial: 10
        #     thereafter: 5
        #   output_paths:
        #     - stdout
        #   error_output_paths:
        #     - stderr
        metrics:
          level: detailed
          address: ${env:MY_POD_IP}:8888

observabilityIngress:
  enabled: true
  annotations: {}
  host: observability.koala.local
  paths:
    - path: /grafana
      service: 
        name: "{{ .Release.Name }}-grafana"
        namespace: "{{ .Release.Namespace }}"
        port: 80


cluster-events-collector:
  enabled: true
  mode: deployment
  replicaCount: 1
  presets:
    kubernetesEvents:
      enabled: true

cluster-metrics-collector:
  enabled: true
  mode: deployment
  replicaCount: 1
  presets:
    clusterMetrics:
      enabled: true